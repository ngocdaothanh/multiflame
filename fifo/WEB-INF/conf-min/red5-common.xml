<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:lang="http://www.springframework.org/schema/lang" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd                            http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.0.xsd">
	<bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
	<!-- This context is shared between all child contexts. -->
	<!-- Server bean -->
	<bean id="red5.server" class="org.red5.server.Server"/>
	<!-- Serializes objects to AMF binary -->
	<bean id="serializer" class="org.red5.io.object.Serializer"/>
	<!-- Deserializes objects from AMF binary -->
	<bean id="deserializer" class="org.red5.io.object.Deserializer"/>
	<!-- Deals with StatusObjects representing statuses like FMS NetConnection.Connect.Success status -->
	<bean id="statusObjectService" class="org.red5.server.net.rtmp.status.StatusObjectService"
		 autowire="byType" init-method="initialize"/>
	<!-- RTMP codec factory -->
	<bean id="rtmpCodecFactory" class="org.red5.server.net.rtmp.codec.RTMPMinaCodecFactory"
		 autowire="byType" init-method="init">
		<property name="minaEncoder">
			<bean class="org.red5.server.net.rtmp.codec.RTMPMinaProtocolEncoder">
				<property name="serializer">
					<ref bean="serializer"/>
				</property>
			</bean>
		</property>
		<property name="minaDecoder">
			<bean class="org.red5.server.net.rtmp.codec.RTMPMinaProtocolDecoder">
				<property name="deserializer">
					<ref bean="deserializer"/>
				</property>
			</bean>
		</property>
	</bean>
	<!-- Remoting calls codec factory -->
	<bean id="remotingCodecFactory" class="org.red5.server.net.remoting.codec.RemotingCodecFactory"
		 autowire="byType" init-method="init"/>
	<!-- Thread that writes modified objects to disk periodically -->
	<bean id="filePersistenceThread" class="org.red5.server.persistence.FilePersistenceThread"/>
	<!-- Handles creation / lookup of shared objects -->
	<bean id="sharedObjectService" class="org.red5.server.so.SharedObjectService">
		<property name="persistenceClassName">
			<value>org.red5.server.persistence.FilePersistence</value>
		</property>
	</bean>
	<!-- High level access to streams -->
	<bean id="streamService" class="org.red5.server.stream.StreamService"/>
	<!-- Hight level access to broadcasted streams -->
	<bean id="providerService" class="org.red5.server.stream.ProviderService"/>
	<!-- Provides output to consumers -->
	<bean id="consumerService" class="org.red5.server.stream.ConsumerService"/>
	<!-- Simple bandwidth control -->
	<bean id="BWControlService" class="org.red5.server.stream.SimpleBWControlService" init-method="init" destroy-method="shutdown">
		<property name="interval" value="100"/>
		<property name="defaultCapacity" value="104857600"/>
		<!-- 100MB -->
	</bean>
	<!-- Dummy bandwidth control that does nothing -->
	<!--
    <bean id="BWControlService" class="org.red5.server.stream.DummyBWControlService"/> -->
	<!-- Scheduling service -->
	<bean id="schedulingService" class="org.red5.server.scheduling.QuartzSchedulingService"
		 destroy-method="shutdown"/>
	<!--
	Now we can load the cache engine, only one may be enabled at a time. If no-caching is required select the
	NoCacheImpl. Three other implementations based on EhCache, WhirlyCache, and Red5Cache are also available.
	-->
	<bean id="object.cache" class="org.red5.server.cache.NoCacheImpl"/>
</beans>
