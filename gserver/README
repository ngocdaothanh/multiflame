== Creating Eclipse project

* Install Red5 as standalone server, not as WAR
* Create <Red5>/webapps/gserver directory
* Check out /trunk/gserver into this <Red5>/webapps/gserver
* From Eclipse create a new Java project named gserver, choose
  "Create project from existing source" and point to <Red5>/webapps/gserver
* Set ouput directory to gserver/WEB-INF/classes
* Add red5.jar, commons-logging-x.jar, spring-core-x.jar to the build path

== Running

* Put logback-classic-x.jar, logback-core-x.jar, slf4j-api-x.jar to WEB-INF/lib.

== Debuging with Eclipse on Windows

* Add the following lines to <Red5>/conf/wrapper.conf
wrapper.java.additional.1=-Djava.security.manager
wrapper.java.additional.2=-Djava.security.policy=<Red5>/conf/red5.policy
wrapper.java.additional.3=-Xdebug
wrapper.java.additional.4=-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y
* Run <Red5>/wrapper/Red5.bat
* In Eclipse, open debug dialog, right click Remote Java Application, choose NEW
* Create a new debug profile named gserver for gserver project, set the port to 8787
* Debug As... -> gserver
